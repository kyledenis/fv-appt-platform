# Generated by Django 4.2.16 on 2024-10-08 04:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentManagementAppointment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('venue', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'appointment_management_appointment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sysdiagrams',
            fields=[
                ('name', models.CharField(max_length=128)),
                ('principal_id', models.IntegerField()),
                ('diagram_id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('definition', models.BinaryField(blank=True, max_length='max', null=True)),
            ],
            options={
                'db_table': 'sysdiagrams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('club_id', models.CharField(db_column='club_ID', max_length=50, primary_key=True, serialize=False)),
                ('club_name', models.CharField(max_length=50)),
                ('contact_name', models.CharField(max_length=50)),
                ('contact_phone_number', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'Club',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_id', models.CharField(db_column='match_ID', max_length=50, primary_key=True, serialize=False)),
                ('match_date', models.DateField()),
                ('level', models.CharField(max_length=50)),
                ('match_time', models.TimeField(null=True)),
                ('away_club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='match_away_club_set', to='appointment_management.club')),
                ('home_club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.club')),
            ],
            options={
                'db_table': 'Match',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Referee',
            fields=[
                ('referee_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='0', max_length=1)),
                ('date_of_birth', models.DateField(null=True)),
                ('age', models.IntegerField()),
                ('location', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=50, null=True)),
                ('email', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=50)),
                ('experience_years', models.IntegerField()),
                ('level', models.CharField(choices=[('0', 'Trainee'), ('1', 'Level 1'), ('2', 'Level 2'), ('3', 'Level 3'), ('4', 'Level 4')], default='0', max_length=1)),
            ],
            options={
                'db_table': 'Referee',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('venue_id', models.CharField(db_column='venue_ID', max_length=50, primary_key=True, serialize=False)),
                ('venue_name', models.CharField(max_length=50)),
                ('capacity', models.IntegerField()),
                ('location', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'Venue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relative_name', models.CharField(max_length=50)),
                ('relationship', models.CharField(max_length=50)),
                ('age', models.IntegerField()),
                ('club', models.ForeignKey(db_column='club_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.club')),
                ('referee', models.ForeignKey(db_column='referee_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee')),
            ],
            options={
                'db_table': 'Relative',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referee', models.ForeignKey(db_column='referee_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee')),
                ('venue', models.ForeignKey(db_column='venue_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.venue')),
            ],
            options={
                'db_table': 'Preference',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(max_length=6)),
                ('date', models.DateField()),
                ('match', models.ForeignKey(db_column='match_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.match')),
                ('referee', models.ForeignKey(db_column='referee_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee')),
            ],
            options={
                'db_table': 'Notification',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='match',
            name='referee',
            field=models.ForeignKey(db_column='referee_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee'),
        ),
        migrations.AddField(
            model_name='match',
            name='venue',
            field=models.ForeignKey(db_column='venue_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.venue'),
        ),
        migrations.AddField(
            model_name='club',
            name='home_venue',
            field=models.ForeignKey(db_column='home_venue_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.venue'),
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('availableID', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(db_column='Date', null=True)),
                ('start_time', models.TimeField(null=True)),
                ('end_time', models.TimeField(null=True)),
                ('duration', models.IntegerField(db_column='Duration', null=True)),
                ('availableType', models.CharField(choices=[('A', 'Available'), ('U', 'Unavailable')], default='A', max_length=1)),
                ('weekday', models.CharField(choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')], max_length=3, null=True)),
                ('referee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee')),
            ],
            options={
                'db_table': 'Availability',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('appointment_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('distance', models.FloatField()),
                ('appointment_date', models.DateField()),
                ('appointment_time', models.TimeField(null=True)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('complete', 'Complete'), ('cancelled', 'Cancelled')], default='ongoing', max_length=10)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.match')),
                ('referee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.referee')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointment_management.venue')),
            ],
            options={
                'db_table': 'Appointment',
                'managed': True,
            },
        ),
    ]
